pipeline{
    agent any
     environment{
        NEXUS_RELEASE_REPO ="mylibs-Release"
        NEXUS_SNAP_REPO="mylibs-Snapshot"
        NEXUS_CENTRAL_REPO ="mylibs-maven-central"
        NEXUS_GRP_REPO="mylibs-Group"
        NEXUS_USER="admin"
        NEXUS_PASS="admin"
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUSPORT="8081"
        NEXUSIP = "18.234.106.112"
        ARTVERSION = "${env.BUILD_ID}"
        NEXUS_CREDENTIAL_ID ="nexuslogin"
    }

    stages{
        stage('Checkout'){
           steps{
                git branch: 'main', url: 'https://github.com/devsecopsmurali/spring-security.git'
            }

        }
        stage('Maven-Build'){
           
              steps{
                sh 'mvn -s settings.xml -DskipTests clean install'
            }
            post {
                success {
                    echo 'Now Archiving...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
         stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version} ARTVERSION";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: NEXUS_GRP_REPO,
                            version: ARTVERSION,
                            repository: NEXUS_RELEASE_REPO,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } 
		    else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}